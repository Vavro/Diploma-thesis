/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from .\tmLanguage\SPARQL.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var SPARQLHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = { start: 
       [ { token: 
            [ 'meta.preprocessor.base.n3',
              'constant.language',
              'meta.preprocessor.base.n3',
              'meta.tag' ],
           regex: '^(\\s*)(BASE)(\\s+)(<[^ \\>]*>)',
           caseInsensitive: true },
         { token: 
            [ 'meta.preprocessor.prefix.n3',
              'constant.language',
              'meta.preprocessor.prefix.n3',
              'constant',
              'meta.preprocessor.prefix.n3',
              'meta.tag' ],
           regex: '^(\\s*)(PREFIX)(\\s+)((?:[a-zA-Z0-9]*:)+)(\\s+)(<[^ \\>]*>)',
           caseInsensitive: true },
         { token: 'keyword.other',
           regex: '\\b(?:WHERE|OPTIONAL|GRAPH|FILTER|ORDER BY|UNION)\\b',
           caseInsensitive: true },
         { token: 
            [ 'keyword.select',
              'keyword.other',
              'keyword.select',
              'variable.language',
              'keyword.select',
              'comment.line.number-sign.n3',
              'invalid' ],
           regex: '^(\\s*)(SELECT(?:\\s*DISTINCT)?)(\\s*)((?:\\s*?(?:\\?|\\$)[a-zA-z0-9_]+)+|\\*)(\\s+)((?:\\#.*$)?)((?:.*)?)',
           caseInsensitive: true },
         { token: [ 'keyword', 'keyword.other', 'keyword', 'meta.tag' ],
           regex: '^(\\s*)(FROM(?:\\s*NAMED)?)(\\s+)(\\b[a-zA-Z0-9\\:\\-_]+\\b|<[^ \\>]*>)',
           caseInsensitive: true },
         { token: 'whereClause',
           regex: '{',
           push: 
            [ { token: 'whereClause', regex: '}', next: 'pop' },
              { include: '#filter' },
              { include: '#optional' },
              { include: '#graph' },
              { include: '#statement' },
              { defaultToken: 'whereClause' } ] },
         { token: 
            [ 'solutionModifier',
              'keyword.other',
              'solutionModifier',
              'constant',
              'solutionModifier',
              'comment.line.number-sign.n3',
              'invalid' ],
           regex: '^(\\s*)((?:LIMIT|OFFSET))(\\s+)((?:[0-9]+)?)(\\s*)((?:#.*)?)(.*)$',
           caseInsensitive: true },
         { token: 
            [ 'punctuation.definition.comment.n3',
              'comment.line.number-sign.n3' ],
           regex: '(#)(.*$)' } ],
      '#PredObjM': 
       [ { token: 
            [ 'meta.statement.predicate.n3',
              'meta.statement.predicate.n3',
              'variable.other',
              'predicateObject' ],
           regex: '(?:([a-zA-Z0-9\\:\\-_]+)|(<.*>)|(\\?[a-zA-z0-9_]+))(\\s|(?=\\())',
           push: 
            [ { token: 'predicateObject',
                regex: ';|(?=\\.|\\}|\\]|FILTER|OPTIONAL)',
                next: 'pop' },
              { include: '#comment' },
              { include: '#var' },
              { include: '#tripleQuote' },
              { include: '#objlistM' },
              { include: '#typedliteral' },
              { include: '#anonObj' },
              { include: '#qname' },
              { include: '#uri' },
              { defaultToken: 'predicateObject' } ] } ],
      '#anonObj': 
       [ { token: 'meta.statement.object.anon.n3',
           regex: '\\[',
           push: 
            [ { token: 'meta.statement.object.anon.n3',
                regex: '\\]',
                next: 'pop' },
              { include: '#comment' },
              { include: '#PredObjM' },
              { defaultToken: 'meta.statement.object.anon.n3' } ] } ],
      '#comment': 
       [ { token: 
            [ 'punctuation.definition.comment.n3',
              'comment.line.number-sign.n3' ],
           regex: '(#)(.*$)' } ],
      '#filter': 
       [ { token: [ 'keyword.other', 'constraint', 'constraint', 'constraint' ],
           regex: '(FILTER)(\\s*)((?:regex)?)(\\(.*\\))',
           caseInsensitive: true } ],
      '#graph': 
       [ { token: 
            [ 'keyword.graph',
              'keyword.other',
              'keyword.graph',
              'variable.language',
              'meta.statement.subject.n3',
              'keyword.graph',
              'comment.line.number-sign.n3',
              'invalid' ],
           regex: '^(\\s*)(GRAPH)(\\s*)(?:((?:\\?|\\$)[a-zA-z0-9_]+)|([a-zA-Z:_\\-]*))(\\s*)((?:\\#.*$)?)((?:[^\\{]*)?)',
           caseInsensitive: true } ],
      '#objlistM': 
       [ { token: 'meta.statement.object.list.n3',
           regex: '\\(',
           push: 
            [ { token: 'meta.statement.object.list.n3',
                regex: '\\)',
                next: 'pop' },
              { include: '#comment' },
              { include: '#objlistM' },
              { include: '#tripleQuote' },
              { include: '#typedliteral' },
              { include: '#anonObj' },
              { include: '#qname' },
              { include: '#uri' },
              { include: '#var' },
              { defaultToken: 'meta.statement.object.list.n3' } ] } ],
      '#optional': 
       [ { token: [ 'keyword.other', 'optional' ],
           regex: '(OPTIONAL)(\\s*)(?=\\{?)',
           caseInsensitive: true } ],
      '#qname': 
       [ { token: 'meta.statement.object.n3',
           regex: '\\b[a-zA-Z0-9\\:\\-_]+\\b\\s*' } ],
      '#statement': 
       [ { token: 
            [ 'meta.statement.subject.n3',
              'meta.statement.subject.n3',
              'meta.statement.subject.n3',
              'variable.other',
              'meta.statement.n3' ],
           regex: '(?:([a-zA-Z0-9\\:\\-_]+)|(\\[\\])|(<[^ \\>]*>)|(\\?[a-zA-z0-9_]+))(\\s*)',
           push: 
            [ { token: 'meta.statement.n3',
                regex: '\\.|(?=\\}|FILTER|OPTIONAL)',
                next: 'pop' },
              { include: '#comment' },
              { include: '#PredObjM' },
              { defaultToken: 'meta.statement.n3' } ] } ],
      '#tripleQuote': 
       [ { token: 'meta.statement.object.literal.n3',
           regex: '"""',
           push: 
            [ { token: 
                 [ 'meta.statement.object.literal.n3',
                   'constant',
                   'meta.statement.object.literal.n3',
                   'invalid' ],
                regex: '(""")((?:\\^\\^(?:[a-zA-z\\-\\:_]+|<.*>)|@[a-z]+)?)(\\s*)((?:[a-zA-Z0-9]*)?)',
                next: 'pop' },
              { defaultToken: 'meta.statement.object.literal.n3' } ] } ],
      '#typedliteral': 
       [ { token: 
            [ 'meta.statement.object.literal.n3',
              'constant',
              'meta.statement.object.literal.n3',
              'invalid' ],
           regex: '("[^"]*")((?:\\^\\^(?:[a-zA-z\\-\\:_]+|<.*>)|@[a-z]+)?)([\\s,]*)((?:[^\\.\\];\\)\\}]*)?)' } ],
      '#uri': 
       [ { token: 'meta.tag',
           regex: '<(?:(?:[a-zA-Z][0-9a-zA-Z]*:)?/{0,2}[0-9a-zA-Z;/?:@&=+$\\.\\-_!~*()%]+)?(?:\\#[0-9a-zA-Z;/?:@&=+$\\.\\-_!~*%]+)?>' } ],
      '#var': [ { token: 'variable.language', regex: '\\?[a-zA-z0-9_]+' } ] }
    
    this.normalizeRules();
};

SPARQLHighlightRules.metaData = { fileTypes: [ 'sparql' ],
      keyEquivalent: '^~N',
      name: 'SPARQL',
      scopeName: 'source.sparql' }


oop.inherits(SPARQLHighlightRules, TextHighlightRules);

exports.SPARQLHighlightRules = SPARQLHighlightRules;
});